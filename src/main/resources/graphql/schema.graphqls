type Role {
  id: String!
  name: String!
  description: String!
}

type User {
  id: String!
  name: String!
  email: String!
  password: String!
  role: Role!
}

type Service {
  id: String!
  name: String!
  description: String!
}

input CreateUserDto {
  name: String!
  email: String!
  password: String!
  role: String!
}

input CreateServiceDto {
  name: String!
  description: String!
}

input UpdateServiceDto {
  name: String
  description: String
}

input CreateRoleDto {
  name: String!
  description: String!
}

input UpdateRoleDto {
  name: String
  description: String
}

input UpdateUserDto {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  getOneUser(id: String!): User
  getAllUsers: [User]
  getOneRole(id: String!): Role
  getAllRoles: [Role]
  getOneService(id: String!): Service
  getAllServices: [Service]
}

type Mutation {
  createUser(createUserDto: CreateUserDto!): User
  updateUser(id: String!, updateUserDto: UpdateUserDto!): User
  createRole(createRoleDto: CreateRoleDto!): Role
  updateRole(id: String!, updateRoleDto: UpdateRoleDto!): Role
  createService(createServiceDto: CreateServiceDto!): Service
  updateService(id: String!, updateServiceDto: UpdateServiceDto!): Service
}
